
import json
import logging
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from bot_utils import get_top_users, escape_markdown

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "YOUR_BOT_TOKEN"

def save_chat_id(chat_id):
    with open("chat_id.txt", "w") as f:
        f.write(str(chat_id))

def load_chat_id():
    try:
        with open("chat_id.txt", "r") as f:
            return int(f.read().strip())
    except FileNotFoundError:
        logger.warning("chat_id.txt not found.")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_chat_id(update.effective_chat.id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_chat_id(update.effective_chat.id)
    try:
        top_users = get_top_users()
        message = "*–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º:*
"
        for i, user_data in enumerate(top_users, start=1):
            username = escape_markdown(user_data.get("username", "–ë–µ–∑ –Ω–∏–∫–∞"))
            message += f"{i}. [{username}](tg://user?id={user_data['user_id']}) ‚Äî `{user_data['message_count']}` —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        await update.message.reply_text(message, parse_mode="MarkdownV2")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /top")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

async def graph_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_chat_id(update.effective_chat.id)
    try:
        with open("activity_chart.png", "rb") as f:
            await update.message.reply_photo(photo=f)
    except FileNotFoundError:
        await update.message.reply_text("–ì—Ä–∞—Ñ–∏–∫ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")

async def stat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_chat_id(update.effective_chat.id)
    await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã /top –∏ /graph.")

async def motohelp_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_chat_id(update.effective_chat.id)
    await update.message.reply_text("üõµ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
/start ‚Äî –∑–∞–ø—É—Å–∫
/top ‚Äî —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/graph ‚Äî –≥—Ä–∞—Ñ–∏–∫
/stat ‚Äî —Å–≤–æ–¥–∫–∞
/motohelp ‚Äî –ø–æ–º–æ—â—å")

async def weekly_summary():
    chat_id = load_chat_id()
    if not chat_id:
        return

    try:
        top_users = get_top_users()
        message = "*–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∑–∞ –Ω–µ–¥–µ–ª—é:*
"
        for i, user_data in enumerate(top_users, start=1):
            username = escape_markdown(user_data.get("username", "–ë–µ–∑ –Ω–∏–∫–∞"))
            message += f"{i}. [{username}](tg://user?id={user_data['user_id']}) ‚Äî `{user_data['message_count']}` —Å–æ–æ–±—â–µ–Ω–∏–π\n"

        await application.bot.send_message(chat_id=chat_id, text=message, parse_mode="MarkdownV2")

        with open("activity_chart.png", "rb") as f:
            await application.bot.send_photo(chat_id=chat_id, photo=f)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –æ—Ç—á—ë—Ç–∞")

async def main():
    global application
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("top", top_command))
    application.add_handler(CommandHandler("graph", graph_command))
    application.add_handler(CommandHandler("stat", stat_command))
    application.add_handler(CommandHandler("motohelp", motohelp_command))

    scheduler = AsyncIOScheduler(timezone=timezone("Europe/Moscow"))
    scheduler.add_job(weekly_summary, trigger="cron", day_of_week="sun", hour=23, minute=59)
    scheduler.start()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
