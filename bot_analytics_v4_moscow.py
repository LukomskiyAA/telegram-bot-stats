import os
import json
import asyncio
import pytz
import logging
import datetime
import matplotlib.pyplot as plt

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from collections import defaultdict

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
STATS_FILE = "stats.json"

# –ß–∞—Ç ID –¥–ª—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏
CHAT_ID = -1002585901809

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def load_stats():
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {"total": defaultdict(int), "weekly": defaultdict(int)}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def save_stats(data):
    with open(STATS_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or not update.message:
        return
    name = user.username or f"{user.first_name} {user.last_name or ''}".strip()
    stats = context.bot_data["stats"]
    stats["total"][name] = stats["total"].get(name, 0) + 1
    stats["weekly"][name] = stats["weekly"].get(name, 0) + 1
    save_stats(stats)

# –ö–æ–º–∞–Ω–¥–∞ /stat
async def stat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats = context.bot_data["stats"]["total"]
    result = "*üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:*\n\n"
    for name, count in sorted(stats.items(), key=lambda x: x[1], reverse=True):
        result += f"‚ñ™Ô∏è {name} ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    await update.message.reply_text(result, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /top
async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats = context.bot_data["stats"]["weekly"]
    top_users = sorted(stats.items(), key=lambda x: x[1], reverse=True)[:10]
    result = "*üèÜ –¢–æ–ø 10 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é:*\n"
    for i, (name, count) in enumerate(top_users, 1):
        result += f"{i}. {name} ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    await update.message.reply_text(result, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /graph
async def graph_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats = context.bot_data["stats"]["weekly"]
    names, counts = zip(*sorted(stats.items(), key=lambda x: x[1], reverse=True))
    plt.figure(figsize=(10, 6))
    plt.barh(names[::-1], counts[::-1])
    plt.xlabel("–°–æ–æ–±—â–µ–Ω–∏–π")
    plt.title("–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é")
    plt.tight_layout()
    plt.savefig("weekly_graph.png")
    plt.close()
    await update.message.reply_photo(photo=open("weekly_graph.png", "rb"))

# –ö–æ–º–∞–Ω–¥–∞ /getid
async def getid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"üÜî Chat ID: `{chat_id}`", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*\n"
        "/stat ‚Äî –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "/top ‚Äî –¢–æ–ø 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "/graph ‚Äî –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "/getid ‚Äî –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞\n"
        "/help ‚Äî –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ /top –∏ /graph
async def weekly_report(context: ContextTypes.DEFAULT_TYPE):
    chat_id = CHAT_ID
    stats = context.bot_data["stats"]["weekly"]

    if stats:
        top_users = sorted(stats.items(), key=lambda x: x[1], reverse=True)[:10]
        result = "*üèÜ –¢–æ–ø 10 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é:*\n"
        for i, (name, count) in enumerate(top_users, 1):
            result += f"{i}. {name} ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        await context.bot.send_message(chat_id=chat_id, text=result, parse_mode="Markdown")

        names, counts = zip(*sorted(stats.items(), key=lambda x: x[1], reverse=True))
        plt.figure(figsize=(10, 6))
        plt.barh(names[::-1], counts[::-1])
        plt.xlabel("–°–æ–æ–±—â–µ–Ω–∏–π")
        plt.title("–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é")
        plt.tight_layout()
        plt.savefig("weekly_graph.png")
        plt.close()

        await context.bot.send_photo(chat_id=chat_id, photo=open("weekly_graph.png", "rb"))

    context.bot_data["stats"]["weekly"] = {}
    save_stats(context.bot_data["stats"])

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.bot_data["stats"] = load_stats()

    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.add_handler(CommandHandler("stat", stat_command))
    app.add_handler(CommandHandler("top", top_command))
    app.add_handler(CommandHandler("graph", graph_command))
    app.add_handler(CommandHandler("getid", getid_command))
    app.add_handler(CommandHandler("help", help_command))

    scheduler = AsyncIOScheduler(timezone=pytz.timezone("Europe/Moscow"))
    scheduler.add_job(weekly_report, "cron", day_of_week="sun", hour=23, minute=59, args=[app.bot])
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
