import logging
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
from bot_utils import get_top_users

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "TELEGRAM_BOT_TOKEN"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π /top, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

def escape_markdown(text: str) -> str:
    escape_chars = r"*_[]()~`>#+-=|{}.!"
    return "".join(f"\{char}" if char in escape_chars else char for char in text)

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    top_users = get_top_users()
    lines = ["üèÜ *–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:*"]
    for i, (user, count) in enumerate(top_users, start=1):
        username = escape_markdown(user.replace('.', '\.').replace('_', '\_'))
        lines.append(f"{i}) @{username} ‚Äî {count}")
    await update.message.reply_text("\n".join(lines), parse_mode="MarkdownV2")

async def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("top", top_command))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: print("‚è∞ Scheduler task executed."), 'interval', minutes=10)
    scheduler.start()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await application.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
async def graph_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("GRAPH –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
