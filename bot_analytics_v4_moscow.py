
import json
import logging
import asyncio
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from bot_utils import get_top_users, escape_markdown

logging.basicConfig(level=logging.INFO, filename="bot.log", filemode="a",
                    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

TOKEN = "YOUR_BOT_TOKEN"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π /top –∏–ª–∏ /graph.")

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        top_users = get_top_users()
        message = "*–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º:*
\#Ô∏è‚É£\#Ô∏è‚É£\#Ô∏è‚É£\#Ô∏è‚É£\#Ô∏è‚É£\#Ô∏è‚É£\#Ô∏è‚É£\#Ô∏è‚É£\#Ô∏è‚É£\#Ô∏è‚É£\n"
        for i, user_data in enumerate(top_users, start=1):
            username = escape_markdown(user_data.get("username", "–ë–µ–∑ –Ω–∏–∫–∞"))
            message += f"{i}. [{username}](tg://user?id={user_data['user_id']}) ‚Äî `{user_data['message_count']}` —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        await update.message.reply_text(message, parse_mode="MarkdownV2")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /top")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def graph_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("activity_chart.png", "rb") as chart:
            await update.message.reply_photo(photo=InputFile(chart), caption="üìä –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")

async def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("top", top_command))
    application.add_handler(CommandHandler("graph", graph_command))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: logger.info("üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω"), 'interval', minutes=1)
    scheduler.start()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
